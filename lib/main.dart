// lib/main.dart
// Combined user's main.dart with FCM notification setup

import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:firebase_auth/firebase_auth.dart';
// ---- ADD THESE IMPORTS for FCM and Firestore (if not already for other purposes) ----
import 'package:firebase_messaging/firebase_messaging.dart';
import 'package:cloud_firestore/cloud_firestore.dart'; // Keep if used for other Firestore operations directly in main or for FieldValue.
// ---- END ADDITIONS ----
import 'package:google_fonts/google_fonts.dart';

// Assuming these screens are in a 'screens' subfolder
// User will need to create these files if they don't exist.
import 'screens/login_screen.dart';
import 'screens/home_screen.dart'; // Ensure this is correctly imported

// Notification related imports (assuming these are in lib/ directly or adjust path)
import 'firebase_options.dart'; // Ensure this is generated by FlutterFire CLI
import 'notification_service.dart'; // You'll create this file
import 'notification_center_screen.dart'; // You'll create this file


// ---- ADD THIS TOP-LEVEL FUNCTION for background message handling ----
@pragma('vm:entry-point')
Future<void> _firebaseMessagingBackgroundHandler(RemoteMessage message) async {
  await Firebase.initializeApp(options: DefaultFirebaseOptions.currentPlatform);
  print("Handling a background message: ${message.messageId}");
  print('Message data: ${message.data}');
  
  // Uncomment these lines
  await NotificationService().init();
  await NotificationService().showNotification(message);
}
// ---- END ADDITION ----

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Firebase.initializeApp(options: DefaultFirebaseOptions.currentPlatform);
  
  // Initialize notification service
  await NotificationService().init();
  
  FirebaseMessaging.onBackgroundMessage(_firebaseMessagingBackgroundHandler);
  
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'CureLink', // Your app title
      debugShowCheckedModeBanner: false,
      theme: ThemeData(
        // Your existing theme code...
        colorScheme: ColorScheme.fromSeed(
          seedColor: const Color(0xFF008080), // Main teal color
          primary: const Color(0xFF008080),   // Primary color for components
          secondary: const Color(0xFF6EB6B4), // A lighter teal for accents
        ),
        useMaterial3: true,
        textTheme: GoogleFonts.poppinsTextTheme(
          Theme.of(context).textTheme,
        ).copyWith(
          bodyLarge: GoogleFonts.poppins(fontSize: 16.0),
          bodyMedium: GoogleFonts.poppins(fontSize: 14.0),
          displayLarge: GoogleFonts.poppins(fontSize: 32.0, fontWeight: FontWeight.bold),
        ),
        appBarTheme: AppBarTheme(
          titleTextStyle: GoogleFonts.poppins(
            color: const Color(0xFF00695C),
            fontSize: 20,
            fontWeight: FontWeight.w600,
          ),
          iconTheme: const IconThemeData(
            color: Color(0xFF00695C),
          ),
        ),
        elevatedButtonTheme: ElevatedButtonThemeData(
          style: ElevatedButton.styleFrom(
            textStyle: GoogleFonts.poppins(
              fontSize: 16,
              fontWeight: FontWeight.w500,
            ),
          ),
        ),
        textButtonTheme: TextButtonThemeData(
          style: TextButton.styleFrom(
            textStyle: GoogleFonts.poppins(),
          )
        ),
      ),
      // ---- ADD/MODIFY routes FOR NOTIFICATION NAVIGATION ----
      // These routes will be used by _handleNotificationTap in HomeScreen
      routes: {
        '/notification_center': (context) => NotificationCenterScreen(),
        // Ensure these route names match what you send in FCM data payload's 'screen' field
        '/appointmentDetail': (context) {
          // Extract ID passed as argument during navigation
          final String? itemId = ModalRoute.of(context)?.settings.arguments as String?;
          return AppointmentDetailScreen(appointmentId: itemId); // Create this screen
        },
        '/prescriptions': (context) { // Example for prescription details
           final String? itemId = ModalRoute.of(context)?.settings.arguments as String?;
           return PrescriptionDetailScreen(prescriptionId: itemId); // Create this screen
        },
         '/familyRequests': (context) { // Example for family requests
           final String? itemId = ModalRoute.of(context)?.settings.arguments as String?;
           return FamilyRequestScreen(requestId: itemId); // Create this screen
        }
        // Add other routes as needed for different notification types
        // e.g., '/labReportDetail', etc.
        ,'/videoConsultation': (context) {
          final String? appointmentId = ModalRoute.of(context)?.settings.arguments as String?;
          return const Scaffold(
            body: Center(
              child: Text('Video Consultation Screen - To be implemented'),
            ),
          );
        },
      },
      // ---- END MODIFICATIONS ----
      home: StreamBuilder<User?>(
        stream: FirebaseAuth.instance.authStateChanges(),
        builder: (context, snapshot) {
          if (snapshot.connectionState == ConnectionState.waiting) {
            return const Scaffold(
              body: Center(child: CircularProgressIndicator()),
            );
          }
          if (snapshot.hasData && snapshot.data != null) {
            // ---- MODIFY THIS LINE: Pass the authenticated User object to HomeScreen ----
            return const HomeScreen();
          }
          // User is not logged in
          return const LoginScreen();
        },
      ),
    );
  }
}

// ---- Placeholder/Example Detail Screens for Navigation ----
// You should create these as proper separate widget files in your 'screens' folder
// or integrate them into your existing screen structure.
// These are included here to prevent immediate errors if the routes are called.

class AppointmentDetailScreen extends StatelessWidget {
  final String? appointmentId;
  const AppointmentDetailScreen({super.key, this.appointmentId});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text("Appointment Details", style: GoogleFonts.poppins()),
        backgroundColor: Theme.of(context).appBarTheme.backgroundColor,
        iconTheme: Theme.of(context).appBarTheme.iconTheme,
        titleTextStyle: Theme.of(context).appBarTheme.titleTextStyle,
      ),
      body: Center(
        child: Text(
          appointmentId != null
              ? "Displaying details for Appointment ID: $appointmentId"
              : "No Appointment ID provided.",
          style: GoogleFonts.poppins(),
          textAlign: TextAlign.center,
        ),
      ),
    );
  }
}

class PrescriptionDetailScreen extends StatelessWidget {
  final String? prescriptionId;
  const PrescriptionDetailScreen({super.key, this.prescriptionId});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text("Prescription Details", style: GoogleFonts.poppins()),
        backgroundColor: Theme.of(context).appBarTheme.backgroundColor,
        iconTheme: Theme.of(context).appBarTheme.iconTheme,
        titleTextStyle: Theme.of(context).appBarTheme.titleTextStyle,
      ),
      body: Center(
        child: Text(
          prescriptionId != null
              ? "Displaying details for Prescription ID: $prescriptionId"
              : "No Prescription ID provided.",
          style: GoogleFonts.poppins(),
          textAlign: TextAlign.center,
        ),
      ),
    );
  }
}

class FamilyRequestScreen extends StatelessWidget {
  final String? requestId;
  const FamilyRequestScreen({super.key, this.requestId});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text("Family Request Details", style: GoogleFonts.poppins()),
        backgroundColor: Theme.of(context).appBarTheme.backgroundColor,
        iconTheme: Theme.of(context).appBarTheme.iconTheme,
        titleTextStyle: Theme.of(context).appBarTheme.titleTextStyle,
      ),
      body: Center(
        child: Text(
          requestId != null
              ? "Displaying details for Family Request ID: $requestId"
              : "No Request ID provided.",
          style: GoogleFonts.poppins(),
          textAlign: TextAlign.center,
        ),
      ),
    );
  }
}
// ---- END PLACEHOLDERS ----

// The MyHomePage widget from your original main.dart is removed as it seems to be a placeholder.
// If it's needed for other purposes, you can reintegrate it.
