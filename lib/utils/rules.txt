rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Users Collection
    match /users/{userId} {
      // User can create their own document upon signup
      allow create: if request.auth != null && request.auth.uid == userId &&
                       request.resource.data.uid == userId &&
                       request.resource.data.email is string &&
                       request.resource.data.displayName is string &&
                       request.resource.data.createdAt == request.time && // Server timestamp for creation
                       (request.resource.data.providerId == "password" || request.resource.data.providerId == "google.com") &&
                       request.resource.data.keys().hasAll(['uid', 'email', 'displayName', 'createdAt', 'providerId', 'role', 'age', 'bloodGroup', 'patientId', 'fcmToken', 'photoURL', 'phoneNumber']) &&
                       (request.resource.data.role == "doctor" || request.resource.data.role == "patient" || request.resource.data.role == null) &&
                       (request.resource.data.age == null || request.resource.data.age is number) &&
                       (request.resource.data.bloodGroup == null || request.resource.data.bloodGroup is string) &&
                       (request.resource.data.patientId == null || request.resource.data.patientId is string) &&
                       (request.resource.data.fcmToken == null || request.resource.data.fcmToken is string) &&
                       (request.resource.data.photoURL == null || request.resource.data.photoURL is string) &&
                       (request.resource.data.phoneNumber == null || request.resource.data.phoneNumber is string);

      allow read: if request.auth != null && request.auth.uid == userId;

      allow update: if request.auth != null && request.auth.uid == userId &&
                       !(request.resource.data.uid != resource.data.uid) &&
                       !(request.resource.data.email != resource.data.email && resource.data.providerId == "password") &&
                       !(request.resource.data.createdAt != resource.data.createdAt) &&
                       !(request.resource.data.providerId != resource.data.providerId) &&
                       !(request.resource.data.role != resource.data.role && resource.data.role == "doctor") &&
                       (request.resource.data.displayName is string || request.resource.data.displayName == null) &&
                       (request.resource.data.photoURL is string || request.resource.data.photoURL == null) &&
                       (request.resource.data.age is number || request.resource.data.age == null) &&
                       (request.resource.data.bloodGroup is string || request.resource.data.bloodGroup == null) &&
                       (request.resource.data.phoneNumber is string || request.resource.data.phoneNumber == null) &&
                       (request.resource.data.fcmToken is string || request.resource.data.fcmToken == null) &&
                       request.resource.data.keys().hasOnly(['uid', 'email', 'displayName', 'photoURL', 'createdAt', 'providerId', 'age', 'bloodGroup', 'patientId', 'fcmToken', 'phoneNumber', 'role', 'updatedAt']);

      allow delete: if false;
    }

    // Categories Collection
    match /categories/{categoryId} {
      allow read: if request.auth != null;
      allow write: if false;
    }

    // Doctors Collection
    match /doctors/{doctorId} {
      // Modified to allow reading doctor's available slots
      allow read: if request.auth != null;
      allow write: if false;
    }

    // Appointments Collection
    match /appointments/{appointmentId} {
      // Function to check if all expected fields are present and no extra fields are sent
      function isAllowedToCreateAppointmentFields(data) {
        let expectedFields = [
          'appointmentId', 'userId', 'userName', 'doctorId', 'doctorName',
          'doctorSpeciality', 'appointmentDate', 'appointmentTime',
          'dateTimeFull', 'category', 'status', 'createdAt', 'notes',
          'updatedAt'
        ];
        return data.keys().hasAll(expectedFields) && data.keys().hasOnly(expectedFields);
      }

      // Function to check if user already has an appointment at the same time
      function hasNoConflictingAppointment() {
        let existingAppointments = getAfter(/databases/$(database)/documents/appointments)
          .where('userId', '==', request.resource.data.userId)
          .where('appointmentDate', '==', request.resource.data.appointmentDate)
          .where('appointmentTime', '==', request.resource.data.appointmentTime)
          .where('status', '==', 'booked');
        return existingAppointments.size() == 0;
      }

      // Modified appointment creation rules
      allow create: if request.auth != null &&
                   request.auth.uid == request.resource.data.userId &&
                   isAllowedToCreateAppointmentFields(request.resource.data) &&
                   isValidNewAppointmentData(request.resource.data, appointmentId) &&
                   isFutureAppointment(request.resource.data) &&
                   hasNoConflictingAppointment();

      // Function to validate appointment data
      // Modified appointment creation validation
      function isValidNewAppointmentData(data, docId) {
        return data.userId is string &&
               data.userName is string && data.userName.size() > 0 &&
               data.doctorId is string &&
               data.doctorName is string && data.doctorName.size() > 0 &&
               data.doctorSpeciality is string && data.doctorSpeciality.size() > 0 &&
               data.appointmentDate is string && data.appointmentDate.matches("^[0-9]{4}-[0-9]{2}-[0-9]{2}$") &&
               data.appointmentTime is string && data.appointmentTime.size() > 0 &&
               data.dateTimeFull is timestamp &&
               data.category is string && data.category.size() > 0 &&
               data.status == 'booked' &&
               (data.createdAt is timestamp || data.createdAt == request.time) &&
               data.notes is string &&
               data.appointmentId == docId &&
               (data.updatedAt is timestamp || data.updatedAt == request.time);
      }

      // Modified future appointment check to be more lenient
      function isFutureAppointment(data) {
        return data.dateTimeFull.toMillis() > (request.time.toMillis());
      }

      // Allow reading appointments with modified conditions
      allow read: if request.auth != null;

      // Modified appointment creation rules
      allow create: if request.auth != null &&
                   request.auth.uid == request.resource.data.userId &&
                   isAllowedToCreateAppointmentFields(request.resource.data) &&
                   isValidNewAppointmentData(request.resource.data, appointmentId) &&
                   isFutureAppointment(request.resource.data);

      // Allow updating appointments (for cancellation)
      allow update: if request.auth != null &&
                   request.auth.uid == resource.data.userId &&
                   resource.data.status == 'booked' &&
                   request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'updatedAt']) &&
                   request.resource.data.status == 'cancelled' &&
                   request.resource.data.updatedAt == request.time;

      allow delete: if false;
    }

    // Prescriptions Collection
    match /prescriptions/{prescriptionId} {
      allow read: if request.auth != null && request.auth.uid == resource.data.userId;
      allow write: if false;
    }
  }
}
